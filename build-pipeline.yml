# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

pr: none # Disable pull request triggers.

pool:
  vmImage: windows-latest
  #name: Default

parameters:
- name: env
  displayName: Stage
  type: string
  default: dev
  values:
  - dev
  - test
  - prod

jobs:
  - job: UseCase3
    displayName: 'Build Use Case 3 Infra'

    steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: Install Terraform

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
        displayName: 'Terraform : Init'
        inputs:
          provider: 'azurerm'
          workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
          backendServiceArm: SC4TF
          backendAzureRmResourceGroupName: 'rg-uit-tfstate'
          backendAzureRmStorageAccountName: 'stgaccuittfstate'
          backendAzureRmContainerName: 'stgcont-uit-tfstate'
          backendAzureRmKey: tf-uc3-${{parameters.stage}}.tfstate

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
        displayName: 'Terraform : Plan'
        inputs:
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
          environmentServiceNameAzureRM: SC4TF

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
        displayName: 'Terraform : Apply'
        inputs:
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
          environmentServiceNameAzureRM: SC4TF
      