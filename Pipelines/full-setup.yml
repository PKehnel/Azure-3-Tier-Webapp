# TF and Ansible Setup
# Stage 1: TF init, plan, apply
# Stage 2: Ansible Playbook, if stage 1 was successful

trigger:
  - none

pr: none # Disable pull request triggers.

parameters:
  - name: stage
    displayName: Stage
    type: string
    default: dev
    values:
      - dev
      - test
      - prod

stages:
  - stage: Terraform
    displayName: Provisioning Infrastructure (Setup Terraform)
    pool:
      vmImage: windows-latest
    jobs:
      - job: TF
        displayName: 'TF Init, Plan, Apply'

        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Install Terraform

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : Init'
            inputs:
              provider: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
              backendServiceArm: SC4TF
              backendAzureRmResourceGroupName: 'rg-uit-tfstate'
              backendAzureRmStorageAccountName: 'stgaccuittfstate'
              backendAzureRmContainerName: 'stgcont-uit-tfstate'
              backendAzureRmKey: tf-uc3-${{parameters.stage}}.tfstate

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : Plan'
            inputs:
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
              environmentServiceNameAzureRM: SC4TF

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : Apply'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\stage\${{parameters.stage}}'
              environmentServiceNameAzureRM: SC4TF

  - stage: Ansible
    displayName: Configuration Management  (Setup Ansible)
    dependsOn:
      - Terraform
    condition: succeeded('Terraform')
    variables:
      - name: stage
        value: ${{parameters.stage}}
    pool:
      name: case3-$(stage)-ansible
    jobs:
      - job: Ansible
        displayName: 'Run Ansible-Playbook'
        steps:
          - task: ms-vscs-rm.vss-services-ansible.ansible-task.Ansible@0
            displayName: 'Run main playbook'
            inputs:
              playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/Ansible/playbook.yaml'
              failOnStdErr: false
              inventoriesAgentMachine: file
              inventoryFileOnAgentMachine: '$(System.DefaultWorkingDirectory)/Ansible/inventory_azure_rm.yaml'
              args: '--extra-vars "stage=$(stage)"'