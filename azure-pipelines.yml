# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Default

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: Install Terraform

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : Init'
  inputs:
    provider: 'azurerm'
    workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\envs\dev'
    backendServiceArm: SC4TF
    backendAzureRmResourceGroupName: 'tfstate'
    backendAzureRmStorageAccountName: 'tfstate1459'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'tf-uc3.tfstate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : Plan'
  inputs:
    command: plan
    workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\envs\dev'
    environmentServiceNameAzureRM: SC4TF

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : Apply'
  inputs:
    command: apply
    workingDirectory: '$(System.DefaultWorkingDirectory)\Terraform\envs\dev'
    environmentServiceNameAzureRM: SC4TF
    